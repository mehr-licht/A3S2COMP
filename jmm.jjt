options {
 LOOKAHEAD=1;
}
PARSER_BEGIN(Calculator)
public class Calculator
{
 public static void main(String args[]) throws ParseException {
 Calculator myCalc = new Calculator(System.in);
 SimpleNode root = myCalc.Expression();
 root.dump("");

 System.out.println("Valor da expressão: "+myCalc.eval(root));
 }
int eval(SimpleNode node) {
if(node.jjtGetNumChildren() == 0) // leaf node with integer value
return node.val;
else if(node.jjtGetNumChildren() == 1) // only one child
return this.eval((SimpleNode) node.jjtGetChild(0));
SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
switch(node.id) {
case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
case CalculatorTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs );
case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
default : // abort
System.out.println("Operador ilegal!");
System.exit(1);
}
return 0;
 }
}

PARSER_END(Calculator)
SKIP :
{
" " | "\r" | "\t"
}
TOKEN:
{
 < INTEGER: (["0"-"9"])+ >
| < LF: "\n" >
}
SimpleNode Expression(): {}
{
 Expr1() <LF> {return jjtThis;}
}
void Expr1() #void: {}
{
 Expr2(1)
 [
 ("+" Expr2(1) #Add(2)
 | "-" Expr2(1) #Sub(2))
 ]
}
void Expr2(int sign) #void: {} // 1: positive; -1: negative
{
 Expr3(sign)
 ("*" Expr3(1) #Mul(2)
 | "/" Expr3(1) #Div(2)
)? // (…)? é equivalente a […]
}
void Expr3(int sign) #void: {Token t;}
{
 t=<INTEGER>
{
jjtThis.val = sign * Integer.parseInt(t.image);
} #Term
 | "-" Expr3(-1)
 | "(" Expr1() ")"
}
