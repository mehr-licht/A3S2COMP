

###### Code printing 0


.class public MonteCarloPi
.super java/lang/Object


.method public static main([Ljava/lang/String;)V
    bipush 0
    invokestatic io/println(I)V
    return
.end method





##########################  WORKING CODE
.class public MonteCarloPi
.super java/lang/Object

.method public <init>()V
   aload_0 ; push this
   invokespecial java/lang/Object/<init>()V ; call super
   return
.end method

.method public static main([Ljava/lang/String;)V
bipush 2
invokestatic io/println(I)V
.end method
return
######################### WORKING CODE




Comandos in Dowloads:
javap -c io.class


/A3S2COMP/
javap -v MonteCarloPi.class
javap -c MonteCarloPi.class
java MonteCarloPi
java -jar jasmin.jar _jasmim_generated.j

       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
















#CÃ³digo-Teste

class MonteCarloPi {

	public boolean performSingleEstimate() {
		int rand1;
		int rand2;
		boolean in_circle;
		int squareDist;

		rand1 = MathUtils.random(0-100, 100);
		rand2 = MathUtils.random(0-100, 100);

		squareDist = (rand1 * rand1 + rand2 * rand2) / 100;
		if (squareDist < 100) {
			in_circle = true;
		} else {
			in_circle = false;
		}

		return in_circle;
	}

	public int estimatePi100(int n) {
		int samples_in_circle;
		int samples_so_far;
		int pi_estimate;

		samples_so_far = 0;
		samples_in_circle = 0;

		while (samples_so_far < n) {
			if (this.performSingleEstimate()) {
				samples_in_circle = samples_in_circle + 1;
			} else {
			}
			samples_so_far = samples_so_far + 1;
		}

		pi_estimate = 400 * samples_in_circle / n;
		return pi_estimate;
	}

	public static void main(String[] args) {
		int pi_estimate_times_100;
		int num_samples;

		num_samples = ioPlus.requestNumber();
		pi_estimate_times_100 = new MonteCarloPi().estimatePi100(num_samples);

		ioPlus.printResult(pi_estimate_times_100);
	}
}
